# +=====================================================+
# |             global setting                          |
# +=====================================================+

# --------------- gitlab ci 变量设置 -----------
# 可传递到各个 job 的环境变量
variables:
  # 项目名称
  PROJECT_NAME: client
  # 模块名称
  MODULE_NAME:  vcd-h5
  # 需要缓存的文件或目录
  CACHE_PATH: node_modules/

  # 构建结果目录, 空格分割多个平台
  # 允许的值: linux windows macos ios android ， 
  # 使用了非法值，upload 会报错
  TGZ_PACKAGE_PLATFORM: linux windows macos

  # 多平台构建支持，是各个平台的构建制品存放目录
  # TGZ_PACKAGE_PLATFORM 里定义了几个，
  # 下面 TGZ_PACKAGE_PATH_{平台名大写} 就要有几个，
  # 同时 build 步骤要能生成出下面目录的及其里面的内容（或者将需要打包上传的文件拷贝到下面的目录）
  TGZ_PACKAGE_PATH_LINUX:           out/upload
  TGZ_PACKAGE_PATH_MACOS:           out/upload
  TGZ_PACKAGE_PATH_WINDOWS:         out/upload

  # gitlab-ci相关执行脚本路径
  GITLAB_CI_PATH:                   gitlab_ci_script
  GITLAB_CI_BUILD_SCRIPT_LINUX:     $GITLAB_CI_PATH/build_linux.sh
  GITLAB_CI_BUILD_SCRIPT_WINDOWS:   $GITLAB_CI_PATH/build_windows.bat
  GITLAB_CI_BUILD_SCRIPT_MACOS:     $GITLAB_CI_PATH/build_macos.sh
  # job 拉取 git 仓库，递归拉取 submodule
  GIT_SUBMODULE_STRATEGY: recursive

# 只有合并请求/打标签才执行 job
.only_run_merge_requests_or_tag: &only_run_merge_requests_or_tag
  only:
    - merge_requests
    - tags
# 只有打标签，标签以 develop- 或 release- 开头的才执行 job
.only_run_tag_with_develop_or_release: &only_run_tag_with_develop_or_release
  except:
    - branches
  only:
    - /^develop-[[:digit:]].*/
    - /^release-[[:digit:]].*/

# +=====================================================+
# |                  stages                             |
# +=====================================================+

# ------ Declare  all stage  -------
stages:
  - build
  - upload

# ---------   build stage ---------
build_linux:
  image: registry.yealinkops.com/common/node:yarn1.16.0
  stage: build
  <<: *only_run_merge_requests_or_tag
  cache:
    paths:
    - $CACHE_PATH/
  script:
    - yarn install --force
    - yarn run build:prod
  # tags 用来匹配跑该 job 的 gitlab runner
  tags:
    - devops_docker_runner
  # artifacts 定义需要在整个 pipeline 的 stage job 之间传递的制品
  # 制品会在 job 结束时上传到 gitlab 上， 在接下来的其他 job 开始恢复到原目录位置
  # 下述定义了  $TGZ_PACKAGE_PATH_LINUX 这个 linux 平台的制品在gitlab 上保留 60 分钟
  artifacts:
    name: $MODULE_NAME
    expire_in: 60 mins
    paths:
      - $CI_PROJECT_DIR/$TGZ_PACKAGE_PATH_LINUX

build_macos:
  stage: build
  <<: *only_run_merge_requests_or_tag
  cache:
    paths:
    - $CACHE_PATH/
  script:
    - yarn install --force
    - yarn run build:prod
  tags:
    - macos_232
  artifacts:
    name: $MODULE_NAME
    expire_in: 60 mins
    paths:
      - $CI_PROJECT_DIR/$TGZ_PACKAGE_PATH_MACOS

build_windows:
  stage: build
  <<: *only_run_merge_requests_or_tag
  cache:
    paths:
    - $CACHE_PATH/
  script:
    - chcp 65001
    - yarn install --force
    - yarn run build:prod
  tags:
    - win10_233
  artifacts:
    name: $MODULE_NAME
    expire_in: 60 mins
    paths:
      - "%TGZ_PACKAGE_PATH_WINDOWS%"

# ---------   upload stage ---------
# 这里的步骤由运维来维护，所以 通过 include 来引用外部的 gitlab ci yml 模板
# 执行 pipeline 的人员需要有 open_document/common/hello_ci 项目的读权限，才能拉到模板
# 
include:
  # tar.gz 包 打包并上传到 nexus
  - project: "open_document/common/gitlab_ci"
    ref: master
    file: 'gitlab_ci/template/tar_and_upload_tgz_package.yml'
